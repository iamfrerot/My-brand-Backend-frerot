"use strict";
/**
 * @swagger
 * tags:
 *   - name: Auth $ Admin
 *     description: Operations related to autholized user
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @swagger
 * /admin/blog/{blogId}:
 *   get:
 *     summary: Getting A single blog As Admin
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: blogId
 *         in: path
 *         description: The ID of the blog you get.
 *         required: true
 *         schema:
 *           type: string
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You will get One Blog Data
 *         content:
 *           application/json:
 *            schema:
 *              type: object
 *              properties:
 *                likes:
 *                  type: number
 *                  example: 200
 *                _id:
 *                  type: string
 *                  example: 661951b602590fb778eb45f5
 *                title:
 *                  type: string
 *                subtitle:
 *                  type: string
 *                img1:
 *                  type: string
 *                img2:
 *                  type: string
 *                body:
 *                  type: string
 *                __v:
 *                  type: number
 *                  description: Automatically Generated By Mongo DB
 *                comments:
 *                  type: array
 *                  description: The Array of All comments Object
 *                  items:
 *                    type: object
 *                    properties:
 *                      name:
 *                        type: string
 *                      email:
 *                        type: string
 *                      comment:
 *                        type: string
 *                createdAt:
 *                  type: string
 *                  description: The Time it was Created
 *                  format: date-time
 *                  example: "2024-04-10T19:47:02.582+00:00"
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/subs:
 *   get:
 *     summary: Getting all Subscribers
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You will get all Subs
 *         content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: 661c54dd30430dd69e677834
 *                  subscriber:
 *                    type: string
 *                    format: email
 *                  date:
 *                    type: string
 *                    format: date-time
 *                    example: 2024-04-10T19:47:02.582+00:00
 *                  __v:
 *                    type: number
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/blogsre:
 *   get:
 *     summary: Getting Recent 5 Blogs
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You get only 5 recent blogs
 *         content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: 661c54dd30430dd69e677834
 *                  title:
 *                    type: string
 *                  subtitle:
 *                    type: string
 *                  body:
 *                    type: string
 *                  img1:
 *                    type: string
 *                    example: https://firebasestorage.googleapis.com/v0/b/my-brand-frontend.appspot
 *                  img2:
 *                    type: string
 *                    example: https://firebasestorage.googleapis.com/v0/b/my-brand-frontend.appspot
 *                  likes:
 *                    type: number
 *                  comments:
 *                     type: array
 *                     description: The Array of All comments Object
 *                     items:
 *                       type: object
 *                       properties:
 *                         name:
 *                           type: string
 *                         email:
 *                           type: string
 *                         comment:
 *                           type: string
 *                  createdAt:
 *                    type: string
 *                    format: date-time
 *                    example: 2024-04-10T19:47:02.582+00:00
 *                  __v:
 *                    type: number
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/messagesre:
 *   get:
 *     summary: Getting Recent 5 Messages
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You get only 5 recent messages
 *         content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: 661c54dd30430dd69e677834
 *                  guest:
 *                    type: string
 *                  guestemail:
 *                    type: string
 *                    format: email
 *                  message:
 *                    type: string
 *                  date:
 *                    type: string
 *                    format: date-time
 *                    example: 2024-04-10T19:47:02.582+00:00
 *                  __v:
 *                    type: number
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/blogs:
 *   get:
 *     summary: Getting All Blogs
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You get All blogs from Database
 *         content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: 661c54dd30430dd69e677834
 *                  title:
 *                    type: string
 *                  subtitle:
 *                    type: string
 *                  body:
 *                    type: string
 *                  img1:
 *                    type: string
 *                    example: https://firebasestorage.googleapis.com/v0/b/my-brand-frontend.appspot
 *                  img2:
 *                    type: string
 *                    example: https://firebasestorage.googleapis.com/v0/b/my-brand-frontend.appspot
 *                  likes:
 *                    type: number
 *                  comments:
 *                     type: array
 *                     description: The Array of All comments Object
 *                     items:
 *                       type: object
 *                       properties:
 *                         name:
 *                           type: string
 *                         email:
 *                           type: string
 *                         comment:
 *                           type: string
 *                  createdAt:
 *                    type: string
 *                    format: date-time
 *                    example: 2024-04-10T19:47:02.582+00:00
 *                  __v:
 *                    type: number
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/messages:
 *   get:
 *     summary: Getting all Messages
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: You get all messages from database
 *         content:
 *           application/json:
 *            schema:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: 661c54dd30430dd69e677834
 *                  guest:
 *                    type: string
 *                  guestemail:
 *                    type: string
 *                    format: email
 *                  message:
 *                    type: string
 *                  date:
 *                    type: string
 *                    format: date-time
 *                    example: 2024-04-10T19:47:02.582+00:00
 *                  __v:
 *                    type: number
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/blog/new:
 *   post:
 *     summary: Create a new blog post
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 description: The title of the blog post
 *                 required: true
 *               subtitle:
 *                 type: string
 *                 description: The subtitle of the blog post
 *                 required: true
 *               body:
 *                 type: string
 *                 description: The content/body of the blog post
 *                 required: true
 *               image1:
 *                 type: string
 *                 format: binary
 *                 nullable: false
 *                 required: true
 *                 description: The first image file to upload
 *               image2:
 *                 type: string
 *                 format: binary
 *                 nullable: false
 *                 required: true
 *                 description: The second image file to upload
 *     responses:
 *       200:
 *         description: The Successfully Posted New Blog
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Posted Successfully
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/blog/update/{blogId}:
 *   put:
 *     summary: Updating a blog post
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *       - name: blogId
 *         in: path
 *         description: The ID of the blog you want to Update.
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 description: The new title of the blog post
 *                 required: true
 *               subtitle:
 *                 type: string
 *                 description: The new subtitle of the blog post
 *               body:
 *                 type: string
 *                 description: The new body of the blog post
 *               image1:
 *                 type: string
 *                 format: binary
 *                 nullable: false
 *                 description: The first image file to upload
 *               image2:
 *                 type: string
 *                 format: binary
 *                 nullable: false
 *                 description: The second image file to upload
 *     responses:
 *       200:
 *         description: The Successfully Posted New Blog
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Succeessfully Updated {Blogs's title}
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/blog/delete/{blogId}:
 *   delete:
 *     summary: Deleting a Blog
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *       - name: blogId
 *         in: path
 *         description: The ID of the blog you want to Delete.
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       202:
 *         description: The Successfully Deleted Blog
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Successfully Delete the blog
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
/**
 * @swagger
 * /admin/message/delete/{blog}:
 *   delete:
 *     summary: Deleting a message
 *     description: |
 *       Authenticate a user and expect the following cookie or Autholization header with Bearer type in the request headers:
 *       - `token`: The token cookie generated upon successful authentication.
 *     tags:
 *      - Auth $ Admin
 *     parameters:
 *       - name: Authorization
 *         in: header
 *         description: An authorization token (Bearer cxMzEyMzQ3N30.JrqoZWMSrVcl.MqMH8FyJozyK5pSkONHRi)
 *         schema:
 *           type: string
 *       - name: blogId
 *         in: path
 *         description: The ID of the message you want to Delete.
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: The Successfully Deleted Blog
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Succefully Deleted the Message
 *       401:
 *         description: The Unautholized User
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Unautholized User
 */
require("dotenv").config();
var express_1 = __importDefault(require("express"));
var adminController_1 = require("../Controllers/adminController");
var guestsContoller_1 = require("../Controllers/guestsContoller");
var app = (0, express_1.default)();
var router = express_1.default.Router();
router.get("/blog/:id", adminController_1.Adget_blog);
router.get("/subs", adminController_1.Adget_subs);
router.get("/blogs", guestsContoller_1.get_blogs);
router.get("/blogsre", adminController_1.Adget_recentBlog);
router.get("/messages", adminController_1.Adget_messages);
router.get("/messagesre", adminController_1.Adget_recentMessage);
router.post("/blog/new", adminController_1.Adpost_newBlog);
router.put("/blog/update/:id", adminController_1.AdUpdate_blog);
router.delete("/blog/delete/:id", adminController_1.AdDelete_blog);
router.delete("/message/delete/:id", adminController_1.AdDelete_message);
exports.default = router;
